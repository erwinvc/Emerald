//? #version 330

//?uniform mat4 _InverseView;
//?uniform mat4 _InverseProjection;

vec3 GetWorldPosition(sampler2D depth, vec2 coord) {
	float z = texture(depth, coord).x * 2.0 - 1.0;
	vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePosition = _InverseProjection * clipSpacePosition;

	viewSpacePosition /= viewSpacePosition.w;
	vec4 worldSpacePosition = _InverseView * viewSpacePosition;
	return worldSpacePosition.xyz;
}

vec3 GetViewPosition(sampler2D depth, vec2 coord) {
	float z = texture(depth, coord).x * 2.0 - 1.0;
	vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePosition = _InverseProjection * clipSpacePosition;
	viewSpacePosition /= viewSpacePosition.w;
	return viewSpacePosition.xyz;
}

vec3 ViewPosToWorldPos(vec3 viewPos) {
	return vec3(_InverseView * vec4(viewPos, 1.0));
}

vec3 ViewNormalToWorldNormal(vec3 normal) {
	return normalize(vec3(_InverseView * vec4(normal, 0.0)));
}